import {
    channelChatId,
    creatorNick,
    cryptoBotAPIKey,
    shopBotAdminCommands
} from "../config.js";
import getShopBotUserOrNullByChatId from "../middlewares/getShopBotUserOrNullByChatId.js";
import {
    shopBotMainMenuKeyboard
} from "../utils/keyboards.js";
import CryptoBotAPI from 'crypto-bot-api';
import shopBot from "../utils/shopBot.js";
import getShopBotAdminsFromDb from "../middlewares/getShopBotAdminsFromDb.js";


const CryptoBotClient = new CryptoBotAPI(cryptoBotAPIKey);

export default async function handleShopBotCallbackQuery(db) {
    shopBot.on('callback_query', async (query) => {
        const queryId = query.id;
        const chatId = query.message.chat.id;
        const messageId = query.message.message_id;
        const foundUserOrNull = await getShopBotUserOrNullByChatId(chatId.toString(), db);

        if (query.data === 'soldOut') {
            return await shopBot.answerCallbackQuery(queryId, {
                text: '–î–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –µ–≥–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è!',
                show_alert: true,
            });
        }

        if (query.data === 'cancel') {
            await shopBot.answerCallbackQuery(queryId, {
                text: `–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —á–∏—Å–ª–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö`,
                show_alert: true,
            });

            return await shopBot.editMessageText('<b>–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —á–∏—Å–ª–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö</b>' + '\n\n' + shopBotAdminCommands, {
                inline_keyboard: [],
                parse_mode: "HTML",
                chat_id: chatId,
                message_id: messageId,
            })
        }

        if (query.data.includes('deleteVoicesToBuy')) {
            const deleteNumId = query.data.split('_')[1];

            try {
                await db.run('DELETE FROM voicesCost WHERE id = ?', [deleteNumId], async function (err) {
                    if (err) {
                        throw new Error(err);
                    }
                });
            } catch (e) {
                throw new Error(e);
            }

            await shopBot.answerCallbackQuery(queryId, {
                text: `–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫—É–ø–∏—Ç—å —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∏–∑ –±–æ—Ç–∞`,
                show_alert: true,
            });

            return await shopBot.editMessageText('<b>–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ —á–∏—Å–ª–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö</b>' + '\n\n' + shopBotAdminCommands, {
                inline_keyboard: [],
                parse_mode: "HTML",
                chat_id: chatId,
                message_id: messageId,
            })
        }

        if (query.data === 'check_subscription') {
            const chatMembership = await shopBot.getChatMember(channelChatId, chatId);

            console.log(chatMembership);

            if (chatMembership.status !== 'left') {
                try {
                    db.run('UPDATE shop_users SET isSubscribed = ? WHERE chatId = ?', [
                        1,
                        chatId.toString(),
                    ], function (err) {
                        if (err) {
                            return console.error(err.message);
                        }

                        console.log(`Email adress was updated`);
                    });
                } catch (e) {
                    throw new Error(e);
                }

                await shopBot.answerCallbackQuery(queryId, {
                    text: '–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª',
                    show_alert: true,
                });

                await shopBot.editMessageText('‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª', {
                    reply_markup: {
                        inline_keyboard: []
                    },
                    chat_id: chatId,
                    message_id: messageId
                });

                const avaliableNumber = foundUserOrNull ? foundUserOrNull.voicesAvaliable : 3;

                await shopBot.sendSticker(chatId, "CAACAgIAAxkBAAEucIpnDmZuToviJWSuPB_N-oVGbci7IQACNFkAAjiScEjRPtOS1bNCfTYE");

                return await shopBot.sendAnimation(chatId, './images/intro.MP4', {
                    parse_mode: "HTML",
                    caption:  'üëã<b>üëã –ü—Ä–∏–≤–µ—Ç, –≥–µ—Ä–æ–π! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤ –º–æ—â–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–ª–æ–≤–Ω–æ –ê–∏–¥ –æ–¥–Ω–∏–º –¥–≤–∏–∂–µ–Ω–∏–µ–º —Ä–∞–∑—Ä—É–±–∞–µ—Ç —Ü–µ–ø–∏! üí™‚ö°Ô∏è</b>' + '\n \n' +
                    `–°–æ–∑–¥–∞—Ç–µ–ª—å: @${creatorNick}, , –º–∞—Å—Ç–µ—Ä –∑–≤—É–∫–∞! üé§üî•` + '\n \n' +
                    `–£ —Ç–µ–±—è –µ—Å—Ç—å <b>${avaliableNumber}</b> –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö —Å —É–º–æ–º, –∫–∞–∫ –ê–∏–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–≤–æ—é —Å–∏–ª—É! üèÜüí• –ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ —ç–ø–∏—á–µ—Å–∫–æ–µ? –¢–æ–≥–¥–∞ –≤–ø–µ—Ä–µ–¥! üéß‚ú®`,
                    reply_markup: {
                        keyboard: shopBotMainMenuKeyboard,
                        resize_keyboard: true
                    }
                });
            }

            await shopBot.answerCallbackQuery(queryId, {
                text: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ',
                show_alert: true,
            });

        }

        if (query.data.includes('payWithCryptoBot')) {
            const goodId = query.data.split('_')[1];
            const good = await getShopBotGoodFromDbById(goodId, db);
            if (!good) {
                return await shopBot.editMessageText('–î–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —É–∂–µ –Ω–µ—Ç—É –≤ –±–æ—Ç–µ, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é', {
                    chat_id: chatId,
                    message_id: messageId
                })
            }

            const newInvoice = await CryptoBotClient.createInvoice({
                amount: good.cost,
                currency: "USDT"
            });

            console.log(newInvoice);

            return await shopBot.editMessageText('‚úÖ –°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É CryptoBot —Å–æ–∑–¥–∞–Ω, –Ω–∞–∂–º–∏—Ç–µ "<b>–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ</b>" –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ —Ç–æ–≤–∞—Ä.' + '\n \n' +
                `–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>${good.cost} USDT</b>` + '\n \n' +
                '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –ø–µ—Ä–µ–¥–∞—Å—Ç –≤–∞—à –∑–∞–∫–∞–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–≤–∞—Ä.', {
                    parse_mode: "HTML",
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: '‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ',
                                url: newInvoice.payUrl
                            }],
                            [{
                                text: '‚òëÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É',
                                callback_data: `checkCryptoBotPayment_${goodId}_${newInvoice.id}`
                            }],
                            [{
                                text: '–ù–∞–∑–∞–¥ üîô',
                                callback_data: `selectGood_${goodId}`
                            }]
                        ]
                    }
                });
        }

        if (query.data.includes('checkCryptoBotPayment')) {
            const voicesNumber = query.data.split('_')[1];
            const invoiceId = query.data.split('_')[2];

            console.log('invoiceId: ', invoiceId);

            const newInvoice = await CryptoBotClient.getInvoices({
                asset: "USDT",
                invoice_ids: [invoiceId],
                count: 1
            });

            console.log('Invoice: ', newInvoice)

            if (newInvoice.items[0].status === 'active') {
                return await shopBot.answerCallbackQuery(queryId, {
                    text: '–í—ã –µ—â—ë –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –≤–∞—à —Ç–æ–≤–∞—Ä! –û–ø–ª–∞—Ç–∏—Ç–µ –µ–≥–æ –ø–æ —Å—Å—ã–ª–∫–µ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º',
                    show_alert: true,
                });
            }

            const adminsArr = await getShopBotAdminsFromDb(db);

            try {
                await db.run('UPDATE shop_users SET voicesAvaliable = ? WHERE chatId = ?', [Number(foundUserOrNull.voicesAvaliable) + Number(voicesNumber), chatId.toString()], function (err) {
                    if (err) {
                        return console.error(err.message);
                    }

                    console.log('voicesAvaliable is updated');
                });
            } catch (e) {
                throw new Error(e);
            }

            try {
                for (const admin of adminsArr) {
                    await shopBot.sendMessage(admin.chatId, `üí∏ <b>–¢–æ–ª—å–∫–æ —á—Ç–æ –±—ã–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ ${voicesNumber} –ì–æ–ª–æ—Å–æ–≤—ã—Ö</b>` + '\n' +
                        `–ù–∞–∑–≤–∞–Ω–∏–µ: ${voicesNumber}, –¶–µ–Ω–∞: ${newInvoice.items[0].amount} USDT` + '\n \n' +
                        `–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${query.from.first_name}. Username: ${query.from.username ? `@${query.from.username}` : '<code>–ù–ï–¢–£ –Æ–ó–ï–†–ù–ï–ô–ú–ê</code>'}, ChatId <code>${chatId}</code>`, {
                            parse_mode: "HTML"
                        }
                    );
                }
            } catch (e) {
                console.log(e);
            }


            await shopBot.answerCallbackQuery(queryId, {
                text: 'üí∏ –í–∞—à–∞ –ø–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
                show_alert: true,
            });

            return await shopBot.editMessageText('üí∏ <b>–í–∞—à–∞ –ø–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>.' + "\n" +
                'ü•∞ <b><i>–ß–∏—Å–ª–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–º –≥–æ–ª–æ—Å–æ–≤—ã—Ö –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ</i></b>', {
                    chat_id: chatId,
                    message_id: messageId,
                    parse_mode: "HTML",
                    reply_markup: {
                        inline_keyboard: []
                    }
                }
            );
        }

    });
}