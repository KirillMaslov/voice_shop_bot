import {
    channelChatId,
    creatorNick,
    cryptoBotAPIKey,
    shopBotAdminCommands
} from "../config.js";
import getShopBotUserOrNullByChatId from "../middlewares/getShopBotUserOrNullByChatId.js";
import {
    shopBotMainMenuKeyboardEn,
    shopBotMainMenuKeyboardRu,
    shopBotOwnCabinetMenuEn,
    shopBotOwnCabinetMenuRu
} from "../utils/keyboards.js";
import CryptoBotAPI from 'crypto-bot-api';
import shopBot from "../utils/shopBot.js";
import getShopBotAdminsFromDb from "../middlewares/getShopBotAdminsFromDb.js";
import getShopBotUsersCountFromDb from "../middlewares/getShopBotUsersCountFromDb.js";
import getRoundBotUserOrNullByChatId from "../middlewares/getRoundBotUserOrNullByChatId.js";


const CryptoBotClient = new CryptoBotAPI(cryptoBotAPIKey);

export default async function handleShopBotCallbackQuery(db) {
    shopBot.on('callback_query', async (query) => {
        const queryId = query.id;
        const chatId = query.message.chat.id;
        const messageId = query.message.message_id;
        const foundUserOrNull = await getShopBotUserOrNullByChatId(chatId.toString(), db);
        let alertText = '';
        let messageText = '';
        let resultKeyboard = shopBotMainMenuKeyboardRu;

        if (!foundUserOrNull) {
            return await shopBot.sendMessage('–ù–∞–∂–º–∏—Ç–µ /start');
        }

        if (query.data === 'empty') {
            return await shopBot.answerCallbackQuery(queryId);
        }

        if (query.data === 'cancel') {
            await shopBot.answerCallbackQuery(queryId, {
                text: `–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —á–∏—Å–ª–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö`,
                show_alert: true,
            });

            return await shopBot.editMessageText('<b>–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —á–∏—Å–ª–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö</b>' + '\n\n' + shopBotAdminCommands, {
                inline_keyboard: [],
                parse_mode: "HTML",
                chat_id: chatId,
                message_id: messageId,
            })
        }

        if (query.data.includes('deleteVoicesToBuy')) {
            const deleteNumId = query.data.split('_')[1];

            try {
                await db.run('DELETE FROM voicesCost WHERE id = ?', [deleteNumId], async function (err) {
                    if (err) {
                        throw new Error(err);
                    }
                });
            } catch (e) {
                throw new Error(e);
            }

            await shopBot.answerCallbackQuery(queryId, {
                text: `–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫—É–ø–∏—Ç—å —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∏–∑ –±–æ—Ç–∞`,
                show_alert: true,
            });

            return await shopBot.editMessageText('<b>–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ —á–∏—Å–ª–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö</b>' + '\n\n' + shopBotAdminCommands, {
                inline_keyboard: [],
                parse_mode: "HTML",
                chat_id: chatId,
                message_id: messageId,
            })
        }

        if (query.data.includes('changeLanguage')) {
            const newLanguage = query.data.split('_')[1];

            try {
                await db.run('UPDATE shop_users SET language = ? WHERE chatId = ?', [newLanguage.toLowerCase(), chatId.toString()], function (err) {
                    if (err) {
                        return console.error(err.message);
                    }

                    console.log('language is updated');
                });
            } catch (e) {
                throw new Error(e);
            }

            const {
                usersNum
            } = await getShopBotUsersCountFromDb(db);

            switch (newLanguage) {
                case 'en':
                    messageText = 'üë®‚Äçüíº <b>Your Profile</b>' + '\n \n' +
                        `üöÄ Your unique Telegram ID: <code>${chatId}</code>` + '\n \n' +
                        `<b>Contact the administrator:</b> @${creatorNick}` + '\n \n' +
                        'üí°<b>Have suggestions for improving the bot?</b>' + '\n' +
                        'üí°<b>Share your ideas with the administrator!</b>' + '\n \n' +
                        `üë• Total number of users: ${usersNum}` + '\n \n' +
                        `‚è≥ You have recorded: <b>${foundUserOrNull.totalVoicesRecorded}</b> voice messages` + '\n \n' +
                        `ü•≥ You have <b>${foundUserOrNull.voicesAvaliable}</b> available voice messages left` + '\n' +
                        'ü§¨ Not satisfied with the quality of the voice message? ü§ó <b>We will replace it!</b>' + '\n' +
                        'Contact the administrator for a replacement.';
                    alertText = "You've chosen the language üá¨üáß";
                    resultKeyboard = shopBotOwnCabinetMenuEn;
                    break;
                case "ru":
                    messageText = 'üë®‚Äçüíº <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>' + '\n \n' +
                        `üöÄ –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π Telegram ID: <code>${chatId}</code>` + '\n \n' +
                        `<b>–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:</b> @${creatorNick}` + '\n \n' +
                        'üí°<b>–ï—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞?</b>' + '\n' +
                        'üí°<b>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –∏–¥–µ—è–º–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!</b>' + '\n \n' +
                        `üë• –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersNum}` + '\n \n' +
                        `‚è≥ –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è –≤—ã –∑–∞–ø–∏—Å–∞–ª–∏: <b>${foundUserOrNull.totalVoicesRecorded}</b> –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π` + '\n \n' +
                        `ü•≥ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å <b>${foundUserOrNull.voicesAvaliable}</b> –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π` + '\n' +
                        'ü§¨ –ù–µ —É—Å—Ç—Ä–æ–∏–ª–æ –∫–∞—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è? ü§ó <b>–ú—ã –µ–≥–æ –∑–∞–º–µ–Ω–∏–º!</b>' + '\n' +
                        '–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –∑–∞–º–µ–Ω—ã.';
                    alertText = "–í—ã –≤—ã–±—Ä–∞–ª–∏ —è–∑—ã–∫ üá∑üá∫";
                    resultKeyboard = shopBotOwnCabinetMenuRu;
                    break;
            }

            await shopBot.answerCallbackQuery(queryId, {
                text: alertText,
                show_alert: true,
            });

            await shopBot.sendSticker(chatId, "CAACAgIAAxkBAAEucIZnDmYekukDQq1QCkH1_zvJ_-FPvQACSVwAAvuvaEgodF_trkXaUjYE", {
                reply_markup: {
                    keyboard: resultKeyboard,
                    resize_keyboard: true
                }
            });

            return await shopBot.sendMessage(chatId, messageText, {
                parse_mode: "HTML",
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: "üá∑üá∫ –Ø–∑—ã–∫",
                            callback_data: 'changeLanguage_ru'
                        }, {
                            text: "üá¨üáß Language",
                            callback_data: 'changeLanguage_en'
                        }]
                    ],
                }
            });
        }

        if (query.data === 'check_subscription') {
            const chatMembership = await shopBot.getChatMember(channelChatId, chatId);
            const roundBotMembership = await getRoundBotUserOrNullByChatId(chatId.toString());

            const avaliableNumber = foundUserOrNull.voicesAvaliable;

            switch (foundUserOrNull.language) {
                case 'en':
                    messageText = 'üëã<b>Hello, hero! I am a bot that turns text into powerful voice messages, like Hades cutting chains with a single strike! üí™‚ö°Ô∏è</b>' + '\n \n' +
                        `Creator: @${creatorNick}, the master of sound! üé§üî•` + '\n \n' +
                        `You have <b>${avaliableNumber}</b> free voice messages ‚Äî use them wisely, like Hades uses his power! üèÜüí• Ready to create something epic? Then let‚Äôs go! üéß‚ú®`;
                    resultKeyboard = shopBotMainMenuKeyboardEn;
                    alertText = 'Channel subscription not found, please subscribe to the channel and press the button again';

                    break;
                case "ru":
                    messageText = 'üëã<b>üëã –ü—Ä–∏–≤–µ—Ç, –≥–µ—Ä–æ–π! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤ –º–æ—â–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–ª–æ–≤–Ω–æ –ê–∏–¥ –æ–¥–Ω–∏–º –¥–≤–∏–∂–µ–Ω–∏–µ–º —Ä–∞–∑—Ä—É–±–∞–µ—Ç —Ü–µ–ø–∏! üí™‚ö°Ô∏è</b>' + '\n \n' +
                        `–°–æ–∑–¥–∞—Ç–µ–ª—å: @${creatorNick}, , –º–∞—Å—Ç–µ—Ä –∑–≤—É–∫–∞! üé§üî•` + '\n \n' +
                        `–£ —Ç–µ–±—è –µ—Å—Ç—å <b>${avaliableNumber}</b> –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö —Å —É–º–æ–º, –∫–∞–∫ –ê–∏–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–≤–æ—é —Å–∏–ª—É! üèÜüí• –ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ —ç–ø–∏—á–µ—Å–∫–æ–µ? –¢–æ–≥–¥–∞ –≤–ø–µ—Ä–µ–¥! üéß‚ú®`;
                    resultKeyboard = shopBotMainMenuKeyboardRu;
                    alertText = '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ';
                    break;
            }

            if (chatMembership.status !== 'left' && roundBotMembership) {
                switch (foundUserOrNull.language) {
                    case 'en':
                        alertText = 'You have successfully subscribed to the channel';
                        break;
                    case "ru":
                        alertText = '–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª';
                        break;
                }
                await shopBot.answerCallbackQuery(queryId, {
                    text: alertText,
                    show_alert: true,
                });

                await shopBot.deleteMessage(chatId, messageId);

                await shopBot.sendSticker(chatId, "CAACAgIAAxkBAAEucIpnDmZuToviJWSuPB_N-oVGbci7IQACNFkAAjiScEjRPtOS1bNCfTYE");

                return await shopBot.sendAnimation(chatId, './images/intro.MP4', {
                    parse_mode: "HTML",
                    caption: messageText,
                    reply_markup: {
                        keyboard: resultKeyboard,
                        resize_keyboard: true
                    }
                });
            }

            return await shopBot.answerCallbackQuery(queryId, {
                text: alertText,
                show_alert: true,
            });

        }

        if (query.data.includes('changeStatisticOfTagsArr')) {
            const iterator = Number(data.split('_')[1]);
            const cycleNum = iterator * 5;

            const tagsArr = await getAllRefferalTagsList(db);

            const keyboard = [];

            for (let i = cycleNum; i < cycleNum + 5; i++) {
                if (tagsArr[i]) {
                    keyboard.push([{
                        text: `${tagsArr[i].tag} - –ø—Ä–∏—à–ª–æ –ª—é–¥–µ–π ${tagsArr[i].count}`,
                        callback_data: `empty`
                    }])
                }
            }

            const navigationButtons = [];

            if (iterator > 0) {
                navigationButtons.push({
                    text: `<<`,
                    callback_data: `changeStatisticOfTagsArr_${iterator - 1}`
                })
            }

            if (tagsArr.length > cycleNum + 5) {
                navigationButtons.push({
                    text: `>>`,
                    callback_data: `changeStatisticOfTagsArr_${iterator + 1}`
                });
            }

            keyboard.push(navigationButtons);

            await shopBot.editMessageReplyMarkup({
                inline_keyboard: tagsArr.length ? keyboard : [
                    [{
                        text: "–í –±–æ—Ç–µ –Ω–µ—Ç—É —Ç–µ–≥–æ–≤",
                        callback_data: 'empty'
                    }]
                ]
            }, {
                chat_id: chatId,
                message_id: messageId
            });
        }

        if (query.data.includes('checkCryptoBotPayment')) {
            const voicesNumber = query.data.split('_')[1];
            const invoiceId = query.data.split('_')[2];

            const newInvoice = await CryptoBotClient.getInvoices({
                asset: "USDT",
                invoice_ids: [invoiceId],
                count: 1
            });

            if (newInvoice.items[0].status === 'active') {
                switch (foundUserOrNull.language) {
                    case 'en':
                        alertText = 'You haven‚Äôt paid for the voice messages yet! Please make the payment using the link below the message';
                        break;
                    case "ru":
                        alertText = '–í—ã –µ—â—ë –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ! –û–ø–ª–∞—Ç–∏—Ç–µ –µ–≥–æ –ø–æ —Å—Å—ã–ª–∫–µ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º';
                        break;
                }

                return await shopBot.answerCallbackQuery(queryId, {
                    text: alertText,
                    show_alert: true,
                });
            }

            const adminsArr = await getShopBotAdminsFromDb(db);

            try {
                await db.run('UPDATE shop_users SET voicesAvaliable = ? WHERE chatId = ?', [Number(foundUserOrNull.voicesAvaliable) + Number(voicesNumber), chatId.toString()], function (err) {
                    if (err) {
                        return console.error(err.message);
                    }

                    console.log('voicesAvaliable is updated');
                });
            } catch (e) {
                throw new Error(e);
            }

            try {
                for (const admin of adminsArr) {
                    await shopBot.sendMessage(admin.chatId, `üí∏ <b>–¢–æ–ª—å–∫–æ —á—Ç–æ –±—ã–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ ${voicesNumber} –ì–æ–ª–æ—Å–æ–≤—ã—Ö</b>` + '\n' +
                        `–ù–∞–∑–≤–∞–Ω–∏–µ: ${voicesNumber}, –¶–µ–Ω–∞: ${newInvoice.items[0].amount} USDT` + '\n \n' +
                        `–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${query.from.first_name}. Username: ${query.from.username ? `@${query.from.username}` : '<code>–ù–ï–¢–£ –Æ–ó–ï–†–ù–ï–ô–ú–ê</code>'}, ChatId <code>${chatId}</code>`, {
                            parse_mode: "HTML"
                        }
                    );
                }
            } catch (e) {
                console.log(e);
            }

            switch (foundUserOrNull.language) {
                case 'en':
                    alertText = 'üí∏ Your purchase was successfully completed!';
                    messageText = 'üí∏ <b>Your purchase was successfully completed!</b>.' + "\n" +
                        'ü•∞ <b><i>The number of voice messages available to you has been updated</i></b>';
                    break;
                case "ru":
                    alertText = 'üí∏ –í–∞—à–∞ –ø–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!';
                    messageText = 'üí∏ <b>–í–∞—à–∞ –ø–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>.' + "\n" +
                        'ü•∞ <b><i>–ß–∏—Å–ª–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–º –≥–æ–ª–æ—Å–æ–≤—ã—Ö –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ</i></b>';
                    break;
            }


            await shopBot.answerCallbackQuery(queryId, {
                text: alertText,
                show_alert: true,
            });

            return await shopBot.editMessageText(messageText, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: "HTML",
                reply_markup: {
                    inline_keyboard: []
                }
            });
        }

    });
}