import CryptoBotAPI from 'crypto-bot-api';
import {
    ElevenLabsClient
} from "elevenlabs";
import ffmpeg from 'fluent-ffmpeg';
import ffmpegInstaller from '@ffmpeg-installer/ffmpeg';
import tmp from 'tmp';
import fs from 'fs';
import * as mm from 'music-metadata';

ffmpeg.setFfmpegPath(ffmpegInstaller.path);

import getShopBotUserOrNullByChatId from "../middlewares/getShopBotUserOrNullByChatId.js";
import {
    channelChatId,
    channelLink,
    channelName,
    creatorNick,
    cryptoBotAPIKey,
    elevenLabsApiKey,
    shopBotAdminCommands,
    andreyDescriptionRu,
    leraDescribtionRu,
    annaDescribtionRu,
    andreyDescriptionEn,
    leraDescriptionEn,
    annaDescriptionEn
} from "../config.js";
import shopBot from "../utils/shopBot.js";
import {
    messageForAllShopBotUsers,
    shopBotCategoryToEditListener,
    userToBlockChatIdListener,
    addVoicesNumberToBuyNumberListener,
    addVoicesNumberToBuyCostListener,
    numOfVoicesToBuyListener,
    girlsVoiceTypeListener,
    modelListener,
    textMessageToVoiceListener,
    voiceMessageToVoiceListener,
    numOfVoicesToEditCostListener,
    newCostForVoicesListener
} from "../utils/maps.js";
import giveShopUserAdminStatus from "../services/giveShopUserAdminStatus.js";
import getShopBotUsersCountFromDb from "../middlewares/getShopBotUsersCountFromDb.js";
import getShopBotUsersChatIds from "../middlewares/getShopBotUsersChatIds.js";
import {
    shopBotMainMenuKeyboardEn,
    shopBotMainMenuKeyboardRu,
    shopBotOwnCabinetMenuEn,
    shopBotOwnCabinetMenuRu
} from "../utils/keyboards.js";
import getShopBotUserRefferalsCount from "../middlewares/getShopBotUserRefferalsCount.js";
import getVoicesCosts from "../middlewares/getVoicesWithCost.js";
import getVoicesToBuyByNumberFromDb from "../middlewares/getVoicesToBuyByNumberFromDb.js";
import insertVoicesCountToBuyInDb from '../services/insertVoicesCountToBuyInDb.js';
import getAllRefferalTagsList from '../middlewares/getAllRefferalTagsList.js';

const CryptoBotClient = new CryptoBotAPI(cryptoBotAPIKey);
const elevenlabs = new ElevenLabsClient({
    apiKey: elevenLabsApiKey // Defaults to process.env.ELEVENLABS_API_KEY
})

export default async function handleShopBotMessage(db) {
    shopBot.on('message', async (msg) => {
        const chatId = msg.chat.id;
        const text = msg.text;

        const foundUserOrNull = await getShopBotUserOrNullByChatId(chatId.toString(), db);
        // checking access
        if (!foundUserOrNull) {
            return 0;
        }

        let messageText = '';
        let resultKeyboard = shopBotMainMenuKeyboardRu;

        console.log(foundUserOrNull);

        if (!foundUserOrNull.language) {
            try {
                await db.run("ALTER TABLE shop_users ADD COLUMN language TEXT DEFAULT 'ru'", function (err) {
                    if (err) {
                        return console.error(err.message);
                    }

                    console.log('language is updated');
                });
            } catch (e) {
                throw new Error(e);
            }
        }

        // const voices = await elevenlabs.voices.getAll();

        // console.log('Available voices:', voices);

        if (foundUserOrNull.isBlocked) {
            switch (foundUserOrNull.language) {
                case 'en':
                    messageText = `You are banned in the bot. To unban, you can contact @${creatorNick} (https://t.me/${creatorNick})`;
                    break;
                case "ru":
                    messageText = `–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å @${creatorNick} (https://t.me/${creatorNick})`;
                    break;
            }

            return await shopBot.sendMessage(chatId, messageText, {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: foundUserOrNull.language === 'en' ? 'Write to unban' : '–ù–∞–ø–∏—Å–∞—Ç—å –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏',
                            url: `https://t.me/${creatorNick}`
                        }]
                    ]
                }
            })
        }

        const chatMembership = await shopBot.getChatMember(channelChatId, chatId);

        if (chatMembership.status === 'left') {
            if (text !== '/start') {
                switch (foundUserOrNull.language) {
                    case 'en':
                        messageText = 'üçì <b>You are not subscribed to the channels yet</b>!' + '\n \n' +
                            '‚ùóÔ∏è <b>To use the bot, subscribe to the channels</b> üëáüèª';
                    case "ru":
                        messageText = 'üçì <b>–¢—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª—ã</b>!' + '\n \n' +
                            '‚ùóÔ∏è <b>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã</b> üëáüèª';
                        break;
                }

                return await shopBot.sendMessage(chatId, messageText, {
                    parse_mode: "HTML",
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: channelName,
                                url: channelLink
                            }],
                            [{
                                text: foundUserOrNull.language === 'en' ? 'üîé Check suscribtion' : "üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                                callback_data: 'check_subscription'
                            }]
                        ]
                    }
                })
            }

            return 0;
        } // end of checking Access


        // check if user is admin
        if (foundUserOrNull.status === 'admin') {
            switch (text) {
                case '/addVoicesNumberToBuy': {
                    addVoicesNumberToBuyNumberListener.set(chatId.toString(), 'true');

                    return await shopBot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏' + '\n' +
                        '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏, –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å"', {
                            reply_markup: {
                                keyboard: [
                                    [{
                                        text: "–û—Ç–º–µ–Ω–∏—Ç—å"
                                    }]
                                ],
                                resize_keyboard: true
                            }
                        });
                }

                case '/deleteVoicesToBuy': {
                    const voicesCostsArr = await getVoicesCosts(db);

                    if (!voicesCostsArr) {
                        return await shopBot.sendMessage(chatId, '<b>–í –±–æ—Ç–µ –Ω–µ—Ç—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫—É–ø–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ</b>' + '\n \n' + shopBotAdminCommands);
                    }

                    const voicesMessages = voicesCostsArr ? voicesCostsArr.map((voice) => (`<b>${voice.number}</b> –ì–æ–ª–æ—Å–æ–≤—ã—Ö üéôÔ∏è - <b>${voice.cost}</b>üí≤`)).join('\n') : '<b>–í –±–æ—Ç–µ –Ω–µ—Ç—É –≥–æ–ª–æ—Å–æ–≤—ã—Ö</b>';

                    const voicesArr = voicesCostsArr ? voicesCostsArr.map((voice) => {
                        return [{
                            text: `–£–¥–∞–ª–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫—É–ø–∏—Ç—å - ${voice.number} –≥–æ–ª–æ—Å–æ–≤—ã—Ö üéôÔ∏è`,
                            callback_data: `deleteVoicesToBuy_${voice.id}`
                        }];
                    }) : [];

                    voicesArr.push([{
                        text: '–û—Ç–º–µ–Ω–∏—Ç—å',
                        callback_data: 'cancel'
                    }])

                    return await shopBot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏' + '\n' +
                        'üí∏<b>–¶–µ–Ω—ã</b>üí∏' + '\n \n' +
                        voicesMessages, {
                            reply_markup: {
                                inline_keyboard: voicesArr
                            },
                            parse_mode: "HTML",
                            disable_web_page_preview: true
                        }
                    );
                }

                case '/tagsRefferalsStatistics': {
                    const tagsArr = await getAllRefferalTagsList(db);

                    const keyboard = [];

                    for (let i = 0; i < 5; i++) {
                        if (tagsArr[i]) {
                            keyboard.push([{
                                text: `${tagsArr[i].tag} - –ø—Ä–∏—à–ª–æ –ª—é–¥–µ–π ${tagsArr[i].count}`,
                                callback_data: `empty`
                            }])
                        }
                    }

                    if (tagsArr.length > 5) {
                        keyboard.push([{
                            text: `>>`,
                            callback_data: `changeStatisticOfTagsArr_1`
                        }])
                    }

                    return await shopBot.sendMessage(chatId, '–í–Ω–∏–∑—É —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ —Ç–µ–≥–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–æ–∑–¥–∞–≤–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', {
                        reply_markup: {
                            inline_keyboard: tagsArr.length ? keyboard : [
                                [{
                                    text: "–í –±–æ—Ç–µ –Ω–µ—Ç—É —Ç–µ–≥–æ–≤",
                                    callback_data: 'empty'
                                }]
                            ]
                        }
                    });
                }

                case '/editVoicesCostToBuy': {
                    const voicesCostsArr = await getVoicesCosts(db);

                    const voicesMessages = voicesCostsArr ? voicesCostsArr.map((voice) => (`<b>${voice.number}</b> –ì–æ–ª–æ—Å–æ–≤—ã—Ö üéôÔ∏è - <b>${voice.cost}</b>üí≤`)).join('\n') : '<b>–í –±–æ—Ç–µ –Ω–µ—Ç—É –≥–æ–ª–æ—Å–æ–≤—ã—Ö</b>';

                    const voicesArr = voicesCostsArr ? voicesCostsArr.map((voice) => {
                        return [{
                            text: `${voice.number} –≥–æ–ª–æ—Å–æ–≤—ã—Ö üéôÔ∏è`
                        }];
                    }) : [];

                    voicesArr.push([{
                        text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥'
                    }])

                    numOfVoicesToEditCostListener.set(chatId.toString(), 'true')

                    return await shopBot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∏–∂–µ' + '\n' +
                        'üí∏<b>–¶–µ–Ω—ã</b>üí∏' + '\n \n' +
                        voicesMessages, {
                            reply_markup: {
                                keyboard: voicesArr,
                                resize_keyboard: true
                            },
                            parse_mode: "HTML",
                            disable_web_page_preview: true
                        }
                    );
                }
            }

            if (text === '/sendAdvertisingMessage') {
                await shopBot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞', {
                    reply_markup: {
                        keyboard: [
                            [{
                                text: "–û—Ç–º–µ–Ω–∏—Ç—å"
                            }]
                        ]
                    }
                });

                return messageForAllShopBotUsers.set(chatId.toString(), 'true');
            }

            if (text === '/statistic') {
                const {
                    usersNum
                } = await getShopBotUsersCountFromDb(db);

                return await shopBot.sendMessage(chatId, '<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>' + '\n \n' +
                    `<i>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ</i>: ${usersNum}`, {
                        parse_mode: "HTML"
                    }
                );
            }

            if (text === '/editCategoryName') {
                const goodsKeyboard = [];

                const goodsFromDb = await getAllShopCategoriesFromDb(db);

                console.log(goodsFromDb);

                if (goodsFromDb) {
                    for (const good of goodsFromDb) {
                        goodsKeyboard.push([{
                            text: good.name
                        }]);
                    }
                } else {
                    return await shopBot.sendMessage(chatId, '<b>–í –±–æ—Ç–µ –Ω–µ—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –±–æ—Ç</b>' + '\n' + shopBotAdminCommands, {
                        parse_mode: "HTML"
                    });
                }

                shopBotCategoryToEditListener.set(chatId.toString(), 'true')

                return await shopBot.sendMessage(chatId, '<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∏–∂–µ</b>' + '\n \n' +
                    `<i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å" —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</i>`, {
                        parse_mode: "HTML",
                        reply_markup: {
                            keyboard: [
                                ...goodsKeyboard,
                                [{
                                    text: "–û—Ç–º–µ–Ω–∏—Ç—å"
                                }]
                            ]
                        }
                    }
                );
            }

            if (text === '/changeBlockStatusUser') {
                userToBlockChatIdListener.set(chatId.toString(), 'true');

                return await shopBot.sendMessage(chatId, '<b>–í–≤–µ–¥–∏—Ç–µ —á–∞—Ç–ò–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏</b>' + '\n \n' +
                    `<i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å" —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</i>`, {
                        parse_mode: "HTML",
                        reply_markup: {
                            keyboard: [
                                [{
                                    text: '–û—Ç–º–µ–Ω–∏—Ç—å'
                                }]
                            ]
                        }
                    }
                );
            }

            if (userToBlockChatIdListener.has(chatId.toString())) {
                userToBlockChatIdListener.delete(chatId.toString());

                if (text == '–û—Ç–º–µ–Ω–∏—Ç—å') {
                    return await shopBot.sendMessage(chatId, '<b>–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>' + '\n' + shopBotAdminCommands, {
                        parse_mode: "HTML",
                        reply_markup: {
                            remove_keyboard: true,
                        }
                    });
                }


                const userToBlock = await getShopBotUserOrNullByChatId(text, db);

                if (!userToBlock) {
                    userToBlockChatIdListener.set(chatId.toString(), 'true');

                    return await shopBot.sendMessage(chatId, '<b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ù–ï –ù–ê–ô–î–ï–ù!! –í–≤–µ–¥–∏—Ç–µ —á–∞—Ç–ò–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏</b>' + '\n \n' +
                        `<i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å" —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</i>`, {
                            parse_mode: "HTML",
                            reply_markup: {
                                keyboard: [
                                    [{
                                        text: '–û—Ç–º–µ–Ω–∏—Ç—å'
                                    }]
                                ]
                            }
                        }
                    );
                }

                try {
                    await db.run('UPDATE shop_users SET status = ? WHERE chatId = ?', [Number(userToBlock.isBlocked) ? 0 : 1, userToBlock.chatId], function (err) {
                        if (err) {
                            return console.error(err.message);
                        }

                        console.log('language is updated');
                    });
                } catch (e) {
                    throw new Error(e);
                }

                return await shopBot.sendMessage(chatId, `<b>–í—ã —É—Å–ø–µ—à–Ω–æ ${Number(userToBlock.isBlocked) ? '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏' : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏'} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>` + '\n' + shopBotAdminCommands, {
                    parse_mode: "HTML",
                    reply_markup: {
                        remove_keyboard: true,
                    }
                });
            }

            if (addVoicesNumberToBuyNumberListener.has(chatId.toString())) {
                addVoicesNumberToBuyNumberListener.delete(chatId.toString());

                if (text === "–û—Ç–º–µ–Ω–∏—Ç—å") {
                    return await shopBot.sendMessage(chatId, '<b>–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏</b>' + '\n' + shopBotAdminCommands, {
                        parse_mode: "HTML",
                        reply_markup: {
                            remove_keyboard: true,
                        }
                    });
                }

                if (isNaN(text)) {
                    addVoicesNumberToBuyNumberListener.set(chatId.toString(), true);

                    return await shopBot.sendMessage(chatId, '<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —á–∏—Å–ª–æ–º!!</b>' + '\n' +
                        '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏, –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å"', {
                            parse_mode: "HTML",
                            reply_markup: {
                                keyboard: [
                                    [{
                                        text: "–û—Ç–º–µ–Ω–∏—Ç—å"
                                    }]
                                ],
                                resize_keyboard: true
                            }
                        });
                }

                addVoicesNumberToBuyCostListener.set(chatId.toString(), text);

                return await shopBot.sendMessage(chatId, `<b>–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è ${text} –≥–æ–ª–æ—Å–æ–≤—ã—Ö</b>` + '\n \n' +
                    '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å"', {
                        reply_markup: {
                            keyboard: [
                                [{
                                    text: "–ò–∑–º–µ–Ω–∏—Ç—å"
                                }]
                            ],
                            resize_keyboard: true
                        },
                        parse_mode: "HTML"
                    })
            }

            if (addVoicesNumberToBuyCostListener.has(chatId.toString())) {
                const voicesNumber = addVoicesNumberToBuyCostListener.get(chatId.toString());
                addVoicesNumberToBuyCostListener.delete(chatId.toString());

                if (text === "–ò–∑–º–µ–Ω–∏—Ç—å") {
                    addVoicesNumberToBuyNumberListener.set(chatId.toString(), 'true');

                    return await shopBot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏' + '\n' +
                        '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏, –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å"', {
                            reply_markup: {
                                keyboard: [
                                    [{
                                        text: "–û—Ç–º–µ–Ω–∏—Ç—å"
                                    }]
                                ],
                                resize_keyboard: true
                            }
                        });
                }

                if (isNaN(text)) {
                    addVoicesNumberToBuyCostListener.set(chatId.toString(), voicesNumber);

                    return await shopBot.sendMessage(chatId, '<b>–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –≤ USDT —á–∏—Å–ª–æ–º!!</b>' + '\n' +
                        '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å"', {
                            parse_mode: "HTML",
                            reply_markup: {
                                keyboard: [
                                    [{
                                        text: "–ò–∑–º–µ–Ω–∏—Ç—å"
                                    }]
                                ],
                                resize_keyboard: true
                            }
                        });
                }

                await insertVoicesCountToBuyInDb(Number(voicesNumber), Number(text), db);

                return await shopBot.sendMessage(chatId, `<b>–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏</b>` + '\n \n' + shopBotAdminCommands, {
                    reply_markup: {
                        remove_keyboard: true
                    },
                    parse_mode: "HTML"
                })
            }

            if (numOfVoicesToEditCostListener.has(chatId.toString())) {
                numOfVoicesToEditCostListener.delete(chatId.toString());
                const numberOfVoicesToChangeCost = parseFloat(text);

                if (!numberOfVoicesToChangeCost || text === '–û—Ç–º–µ–Ω–∏—Ç—å') {
                    return await shopBot.sendMessage(chatId, '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≥–æ–ª–æ—Å–æ–≤—ã–º' + '\n\n' + shopBotAdminCommands);
                }

                newCostForVoicesListener.set(chatId.toString(), numberOfVoicesToChangeCost);

                return await shopBot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è ${numberOfVoicesToChangeCost} –≥–æ–ª–æ—Å–æ–≤—ã—Ö –ß–ò–°–õ–û–ú.` + '\n\n' +
                    '–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –Ω–∞–∂–º–∏—Ç–µ "–í—ã–±—Ä–∞—Ç—å"', {
                        reply_markup: {
                            keyboard: [
                                [{
                                    text: "–í—ã–±—Ä–∞—Ç—å"
                                }]
                            ]
                        }
                    })
            }

            if (newCostForVoicesListener.has(chatId.toString())) {
                const voicesNumber = newCostForVoicesListener.get(chatId.toString());
                newCostForVoicesListener.delete(chatId.toString());

                if (text === "–í—ã–±—Ä–∞—Ç—å") {
                    const voicesCostsArr = await getVoicesCosts(db);

                    const voicesMessages = voicesCostsArr ? voicesCostsArr.map((voice) => (`<b>${voice.number}</b> –ì–æ–ª–æ—Å–æ–≤—ã—Ö üéôÔ∏è - <b>${voice.cost}</b>üí≤`)).join('\n') : '<b>–í –±–æ—Ç–µ –Ω–µ—Ç—É –≥–æ–ª–æ—Å–æ–≤—ã—Ö</b>';

                    const voicesArr = voicesCostsArr ? voicesCostsArr.map((voice) => {
                        return [{
                            text: `${voice.number} –≥–æ–ª–æ—Å–æ–≤—ã—Ö üéôÔ∏è`
                        }];
                    }) : [];

                    voicesArr.push([{
                        text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥'
                    }])

                    numOfVoicesToEditCostListener.set(chatId.toString(), 'true')

                    return await shopBot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∏–∂–µ' + '\n' +
                        'üí∏<b>–¶–µ–Ω—ã</b>üí∏' + '\n \n' +
                        voicesMessages, {
                            reply_markup: {
                                keyboard: voicesArr,
                                resize_keyboard: true
                            },
                            parse_mode: "HTML",
                            disable_web_page_preview: true
                        }
                    );
                }

                if (isNaN(text)) {
                    newCostForVoicesListener.set(chatId.toString(), voicesNumber);

                    return await shopBot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è ${voicesNumber} –≥–æ–ª–æ—Å–æ–≤—ã—Ö –ß–ò–°–õ–û–ú.` + '\n\n' +
                        '–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –Ω–∞–∂–º–∏—Ç–µ "–í—ã–±—Ä–∞—Ç—å"', {
                            reply_markup: {
                                keyboard: [
                                    [{
                                        text: "–í—ã–±—Ä–∞—Ç—å"
                                    }]
                                ]
                            }
                        })
                }

                try {
                    await db.run('UPDATE voicesCost SET cost = ? WHERE number = ?', [Number(text), Number(voicesNumber)], function (err) {
                        if (err) {
                            return console.error(err.message);
                        }

                        console.log('language is updated');
                    });
                } catch (e) {
                    throw new Error(e);
                }

                return await shopBot.sendMessage(chatId, '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–∏–ª–∏ —Ü–µ–Ω—É, —Ç–µ–ø–µ—Ä—å —ç—Ç–æ: ' + '\n' +
                    `<b>${voicesNumber}</b> –ì–æ–ª–æ—Å–æ–≤—ã—Ö üéôÔ∏è - <b>${text}</b>üí≤` + '\n\n' + shopBotAdminCommands, {
                        parse_mode: "HTML"
                    });
            }

            if (messageForAllShopBotUsers.has(chatId.toString())) {
                messageForAllShopBotUsers.delete(chatId.toString());

                if (text === "–û—Ç–º–µ–Ω–∏—Ç—å") {
                    return await shopBot.sendMessage(chatId, '<b>–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</b>', {
                        parse_mode: "HTML"
                    });
                }

                const userIds = await getShopBotUsersChatIds(db);

                console.log(userIds);

                for (const userId of userIds) {
                    try {
                        await shopBot.copyMessage(userId, chatId, msg.message_id);
                    } catch (error) {
                        if (error.response && error.response.body && error.response.body.error_code === 403) {
                            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.`);

                            db.run('DELETE FROM shop_users WHERE chatId = ?', [userId], (err) => {
                                if (err) {
                                    throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, err.message);
                                } else {
                                    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.`);
                                }
                            });
                        }
                    }
                }

                return await shopBot.sendMessage(chatId, '–í—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º' + '\n' + shopBotAdminCommands, {
                    parse_mode: "HTML",
                    reply_markup: {
                        keyboard: shopBotMainMenuKeyboardRu
                    }
                })
            }
        }

        switch (text) {
            case 'xG7hJm2uNs5kL8oQ': {
                await giveShopUserAdminStatus(chatId.toString(), db);

                return await shopBot.sendMessage(chatId, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ' + shopBotAdminCommands);
            }

            case '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            case '‚Ü©Ô∏è Back': {
                if (numOfVoicesToBuyListener.has(chatId.toString())) {
                    numOfVoicesToBuyListener.delete(chatId.toString());
                }

                if (textMessageToVoiceListener.has(chatId.toString())) {
                    textMessageToVoiceListener.delete(chatId.toString());
                }

                if (modelListener.has(chatId.toString())) {
                    modelListener.delete(chatId.toString());
                }

                if (numOfVoicesToBuyListener.has(chatId.toString())) {
                    numOfVoicesToBuyListener.delete(chatId.toString());
                }

                await shopBot.sendSticker(chatId, "CAACAgIAAxkBAAEucI5nDma6ynZVH5locgWDsWhuGX9CpwACj2cAArmjaUgrEmxhH2HAbDYE");

                switch (foundUserOrNull.language) {
                    case 'en':
                        messageText = 'üëã <b>Oh glorious warrior, you have returned to the main menu!</b>' + '\n' +
                            'Choose the path that will lead you to the desired section üèõÔ∏è‚ö°Ô∏è' + '\n \n' +
                            `<b>Bot creator:</b> @${creatorNick} üî±`;
                        resultKeyboard = shopBotMainMenuKeyboardEn;
                        break;
                    case "ru":
                        messageText = 'üëã <b>–û —Å–ª–∞–≤–Ω—ã–π –≤–æ–∏–Ω, —Ç—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!</b>' + '\n' +
                            '–í—ã–±–µ—Ä–∏ –ø—É—Ç—å, —á—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç —Ç–µ–±—è –∫ –Ω—É–∂–Ω–æ–º—É —Ä–∞–∑–¥–µ–ª—É üèõÔ∏è‚ö°Ô∏è' + '\n \n' +
                            `<b>–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞:</b> @${creatorNick} üî±`;
                        resultKeyboard = shopBotMainMenuKeyboardRu;
                        break;
                }

                return await shopBot.sendMessage(chatId, messageText, {
                    parse_mode: "HTML",
                    reply_markup: {
                        keyboard: resultKeyboard,
                        resize_keyboard: true
                    }
                });
            }


            case 'üë© –ñ–µ–Ω—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞':
            case 'üë© Female voices': {
                girlsVoiceTypeListener.set(chatId.toString(), 'true');

                switch (foundUserOrNull.language) {
                    case 'en':
                        messageText = 'Choose the conversion method.' + '\n' +
                            'üìù <b>Text</b> - the bot will convert the text you write into a pleasant voice message! üí¨üí™' + '\n' +
                            '<b>Voice</b> - the bot will create a voice message with a female voice based on your audio, as if it‚Äôs the voice of a goddess! üîäüë©‚Äçüé§';
                        resultKeyboard = [
                            [{
                                text: "Text",
                            }, {
                                text: "Voice",
                            }, {
                                text: '‚Ü©Ô∏è Back'
                            }]
                        ];
                        break;
                    case "ru":
                        messageText = '–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è.' + '\n' +
                            'üìù <b>–¢–µ–∫—Å—Ç</b> - –±–æ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –Ω–∞–ø–∏—à–∏—Ç–µ, –≤ –ø—Ä–∏—è—Ç–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üí¨üí™' + '\n' +
                            '<b>–ì–æ–ª–æ—Å–æ–≤–æ–µ</b> - –±–æ—Ç —Å–¥–µ–ª–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å –∂–µ–Ω—Å–∫–∏–º –≥–æ–ª–æ—Å–æ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –∞—É–¥–∏–æ, —Å–ª–æ–≤–Ω–æ —ç—Ç–æ –≥–æ–ª–æ—Å –±–æ–≥–∏–Ω–∏! üîäüë©‚Äçüé§';
                        resultKeyboard = [
                            [{
                                text: "–¢–µ–∫—Å—Ç",
                            }, {
                                text: "–ì–æ–ª–æ—Å–æ–≤–æ–µ",
                            }, {
                                text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥'
                            }]
                        ];
                        break;
                }

                await shopBot.sendSticker(chatId, "CAACAgIAAxkBAAEucJxnDmdcp8iKj8dYjRVSPLbmDgwwuQAC-WYAArSCaUgzuDOl87Tm2DYE");
                return await shopBot.sendMessage(chatId, messageText, {
                    parse_mode: "HTML",
                    reply_markup: {
                        keyboard: resultKeyboard,
                        resize_keyboard: true
                    }
                });
            }

            case "üë® –ú—É–∂—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞":
            case "üë® Male voices": {
                modelListener.set(chatId.toString(), "–¢–µ–∫—Å—Ç");

                switch (foundUserOrNull.language) {
                    case 'en':
                        modelListener.set(chatId.toString(), "Text");
                        messageText = 'You have chosen the section with male voices. üéôÔ∏èüí™' + '\n' +
                            '<b>Select a model:</b>' + '\n \n' +
                            '‚ÄºÔ∏è<b>Remember.</b>' + '\n' +
                            `enter text with correct spelling and punctuation. Write numbers in words to maintain the precision of the speech. Use stickers to convey the right mood and enhance the effect of your message! üòäüî•`;

                        // messageText = `üí• <b>Hey, hero!</b>üí•` + '\n' +
                        //     'You forgot something... I think you need to choose a model? ‚öîÔ∏è' + '\n\n' +
                        //     'Do it on the panel below and get ready for your great deeds! üí™';
                        resultKeyboard = [
                            [{
                                text: "Andrew",
                            }, {
                                text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥'
                            }]
                        ];
                        break;
                    case "ru":
                        modelListener.set(chatId.toString(), "–¢–µ–∫—Å—Ç");
                        // messageText = `üí• <b>–≠–π, –≥–µ—Ä–æ–π!</b>üí•` + '\n' +
                        //     '–¢—ã –∫–æ–µ-—á—Ç–æ –∑–∞–±—ã–ª‚Ä¶ –ü–æ-–º–æ–µ–º—É, –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å? ‚öîÔ∏è' + '\n\n' +
                        //     '–°–¥–µ–ª–∞–π —ç—Ç–æ –Ω–∞ –ø–∞–Ω–µ–ª–∏ –Ω–∏–∂–µ –∏ –ø—Ä–∏—Å—Ç—É–ø–∞–π –∫ —Å–≤–æ–∏–º –≤–µ–ª–∏–∫–∏–º –ø–æ–¥–≤–∏–≥–∞–º! üí™';
                        messageText = '–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª —Å –º—É–∂—Å–∫–∏–º–∏ –≥–æ–ª–æ—Å–∞–º–∏. üéôÔ∏èüí™' + '\n' +
                            '<b>–í—ã–±–µ—Ä–µ—Ç–µ –º–æ–¥–µ–ª—å:</b>' + '\n \n' +
                            '‚ÄºÔ∏è<b>–ü–æ–º–Ω–∏—Ç–µ.</b>' + '\n' +
                            `–≤–≤–æ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ –≤—Å–µ–º–∏ –∑–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è. –¶–∏—Ñ—Ä—ã –ø–∏—à–∏—Ç–µ –ø—Ä–æ–ø–∏—Å—å—é, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –∑–≤—É—á–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∏–∫–µ—Ä—ã, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –Ω—É–∂–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —É—Å–∏–ª–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è! üòäüî•`;
                        resultKeyboard = [
                            [{
                                text: "–ê–Ω–¥—Ä–µ–π",
                            }, {
                                text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥'
                            }]
                        ];

                        break;
                }

                await shopBot.sendSticker(chatId, "CAACAgIAAxkBAAEucIhnDmY9ZMwmJZ7MVja6WLQRMheMsQACnmYAAtkCaEh506_l6mpDDDYE");
                return await shopBot.sendMessage(chatId, messageText, {
                    parse_mode: "HTML",
                    reply_markup: {
                        keyboard: resultKeyboard,
                        resize_keyboard: true
                    }
                });
            }

            case 'üë®‚Äçüíº –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç':
            case 'üë®‚Äçüíº Profile': {
                const {
                    usersNum
                } = await getShopBotUsersCountFromDb(db);

                switch (foundUserOrNull.language) {
                    case 'en':
                        messageText = 'üë®‚Äçüíº <b>Your Profile</b>' + '\n \n' +
                            `üöÄ Your unique Telegram ID: <code>${chatId}</code>` + '\n \n' +
                            `<b>Contact the administrator:</b> @${creatorNick}` + '\n \n' +
                            'üí°<b>Have suggestions for improving the bot?</b>' + '\n' +
                            'üí°<b>Share your ideas with the administrator!</b>' + '\n \n' +
                            `üë• Total number of users: ${usersNum}` + '\n \n' +
                            `‚è≥ You have recorded: <b>${foundUserOrNull.totalVoicesRecorded}</b> voice messages` + '\n \n' +
                            `ü•≥ You have <b>${foundUserOrNull.voicesAvaliable}</b> available voice messages left` + '\n' +
                            'ü§¨ Not satisfied with the quality of the voice message? ü§ó <b>We will replace it!</b>' + '\n' +
                            'Contact the administrator for a replacement.';
                        resultKeyboard = shopBotOwnCabinetMenuEn;
                        break;
                    case "ru":
                        messageText = 'üë®‚Äçüíº <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>' + '\n \n' +
                            `üöÄ –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π Telegram ID: <code>${chatId}</code>` + '\n \n' +
                            `<b>–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:</b> @${creatorNick}` + '\n \n' +
                            'üí°<b>–ï—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞?</b>' + '\n' +
                            'üí°<b>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –∏–¥–µ—è–º–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!</b>' + '\n \n' +
                            `üë• –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersNum}` + '\n \n' +
                            `‚è≥ –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è –≤—ã –∑–∞–ø–∏—Å–∞–ª–∏: <b>${foundUserOrNull.totalVoicesRecorded}</b> –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π` + '\n \n' +
                            `ü•≥ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å <b>${foundUserOrNull.voicesAvaliable}</b> –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π` + '\n' +
                            'ü§¨ –ù–µ —É—Å—Ç—Ä–æ–∏–ª–æ –∫–∞—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è? ü§ó <b>–ú—ã –µ–≥–æ –∑–∞–º–µ–Ω–∏–º!</b>' + '\n' +
                            '–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –∑–∞–º–µ–Ω—ã.';
                        resultKeyboard = shopBotOwnCabinetMenuRu;
                        break;
                }
                await shopBot.sendSticker(chatId, "CAACAgIAAxkBAAEucIZnDmYekukDQq1QCkH1_zvJ_-FPvQACSVwAAvuvaEgodF_trkXaUjYE", {
                    reply_markup: {
                        keyboard: resultKeyboard,
                        resize_keyboard: true
                    }
                });

                return await shopBot.sendMessage(chatId, messageText, {
                    parse_mode: "HTML",
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: "üá∑üá∫ –Ø–∑—ã–∫",
                                callback_data: 'changeLanguage_ru'
                            }, {
                                text: "üá¨üáß Language",
                                callback_data: 'changeLanguage_en'
                            }]
                        ],
                    }
                });

            }

            case "ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞":
            case "ü§ù Refferal system": {
                const refferalsCount = await getShopBotUserRefferalsCount(chatId.toString(), db);

                switch (foundUserOrNull.language) {
                    case 'en':
                        messageText = '<b>Invite friends to our glorious kingdom and receive generous gifts from the gods!</b> üéÅ‚ú®' + '\n \n' +
                            'üî± Here is your sacred referral link, granted by Hades himself:' + '\n' +
                            `https://t.me/MegSoundBot?start=${chatId}` + '\n \n' +
                            `Number of invited heroes: <b>${refferalsCount.usersNum}</b> üèõÔ∏èüëè` + '\n \n' +
                            '<i>For every fifth invited friend, the gods will reward you with three additional voice messages!</i> üí¨üé∂';
                        break;
                    case "ru":
                        messageText = '<b>–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –≤ –Ω–∞—à–µ —Å–ª–∞–≤–Ω–æ–µ —Ü–∞—Ä—Å—Ç–≤–æ –∏ –ø–æ–ª—É—á–∞–π —â–µ–¥—Ä—ã–µ –¥–∞—Ä—ã –±–æ–≥–æ–≤!</b>  üéÅ‚ú®' + '\n \n' +
                            'üî± –í–æ—Ç —Ç–≤–æ—è —Å–≤—è—â–µ–Ω–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞, –¥–∞—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∞–º–∏–º –ê–∏–¥–æ–º:' + '\n' +
                            `https://t.me/MegSoundBot?start=${chatId}` + '\n \n' +
                            `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤: <b>${refferalsCount.usersNum}</b> üèõÔ∏èüëè` + '\n \n' +
                            '<i>–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—è—Ç–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞, –±–æ–≥–∏ –Ω–∞–≥—Ä–∞–¥—è—Ç —Ç–µ–±—è —Ç—Ä–µ–º—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏!</i> üí¨üé∂';
                        break;
                }

                await shopBot.sendSticker(chatId, "CAACAgIAAxkBAAEucIRnDmX-bm0aaPcW6AZf_ETGxkbHbgAC4F0AAm01aEjrUPZyq9V63TYE");
                // return await shopBot.sendMessage(chatId, '–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å! üéÅ' + '\n \n' +
                //     '–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: –í–∞—à–∞ –Ω–æ–≤–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:' + '\n' +
                //     `https://t.me/MegSoundBot?start=${chatId}` + '\n \n' +
                //     `–¢—ã —É–∂–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª ${refferalsCount.usersNum} —á–µ–ª–æ–≤–µ–∫` + '\n \n' +
                //     '–ó–∞ –∫–∞–∂–¥—ã—Ö 5 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å 3 –≥–æ–ª–æ—Å–æ–≤—ã—Ö üí∞', {
                //         parse_mode: "HTML",
                //         disable_web_page_preview: true
                //     }
                // );

                return await shopBot.sendMessage(chatId, messageText, {
                    parse_mode: "HTML",
                    disable_web_page_preview: true
                });

            }

            case 'üõçÔ∏è –ü–æ–∫—É–ø–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π':
            case 'üõçÔ∏è Buy voice messages': {
                const voicesCostsArr = await getVoicesCosts(db);

                switch (foundUserOrNull.language) {
                    case 'en':
                        messageText = 'Choose the number of voice messages you want to purchase' + '\n' +
                            'üí∏<b>Available prices</b>üí∏';
                        break;
                    case "ru":
                        messageText = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏' + '\n' +
                            'üí∏<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–Ω—ã</b>üí∏';
                        break;
                }

                const voicesMessages = voicesCostsArr ? voicesCostsArr.map((voice) => (`<b>${voice.number}</b> ${foundUserOrNull.language === 'en' ? 'Voices' : '–ì–æ–ª–æ—Å–æ–≤—ã—Ö'} üéôÔ∏è - <b>${voice.cost}</b>üí≤`)).join('\n') : foundUserOrNull.language === 'en' ? '' : '<b>–í –±–æ—Ç–µ –Ω–µ—Ç—É –≥–æ–ª–æ—Å–æ–≤—ã—Ö</b>';

                const voicesArr = voicesCostsArr ? voicesCostsArr.map((voice) => {
                    return [{
                        text: `${voice.number} ${foundUserOrNull.language === 'en' ? 'voices' : '–≥–æ–ª–æ—Å–æ–≤—ã—Ö'} üéôÔ∏è`
                    }];
                }) : [];

                voicesArr.push([{
                    text: foundUserOrNull.language === 'en' ? '‚Ü©Ô∏è Back' : '‚Ü©Ô∏è –ù–∞–∑–∞–¥'
                }])

                numOfVoicesToBuyListener.set(chatId.toString(), 'true')

                await shopBot.sendSticker(chatId, "CAACAgIAAxkBAAEucJRnDmcUCNlBRRPzhgWpgXb-MIrp-QACjFwAAqYEaEieWJzGdVvhHTYE");
                // return await shopBot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å' + '\n' +
                //     'üí∏<b>–¶–µ–Ω—ã</b>üí∏' + '\n \n' +
                //     voicesMessages, {
                //         reply_markup: {
                //             keyboard: voicesArr,
                //             resize_keyboard: true
                //         },
                //         parse_mode: "HTML",
                //         disable_web_page_preview: true
                //     }
                // );

                return await shopBot.sendMessage(chatId, messageText + '\n \n' +
                    voicesMessages, {
                        reply_markup: {
                            keyboard: voicesArr,
                            resize_keyboard: true
                        },
                        parse_mode: "HTML",
                        disable_web_page_preview: true
                    }
                );
            }
        }

        if (numOfVoicesToBuyListener.has(chatId.toString())) {
            numOfVoicesToBuyListener.delete(chatId.toString());

            const voicesToBuyNum = parseFloat(text);

            await shopBot.sendSticker(chatId, "CAACAgIAAxkBAAEucJxnDmdcp8iKj8dYjRVSPLbmDgwwuQAC-WYAArSCaUgzuDOl87Tm2DYE");
            const voices = await getVoicesToBuyByNumberFromDb(voicesToBuyNum, db);

            if (!voices) {
                switch (foundUserOrNull.language) {
                    case 'en':
                        messageText = `The requested number of voice messages for purchase is temporarily unavailable` + '\n \n' +
                            'Please use the keyboard';
                        break;
                    case "ru":
                        messageText = `–î–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ` + '\n \n' +
                            '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π';
                        break;
                }

                return await shopBot.sendMessage(chatId, messageText);
            }

            const newInvoice = await CryptoBotClient.createInvoice({
                amount: Number(voices.cost),
                currency: "USDT"
            });

            switch (foundUserOrNull.language) {
                case 'en':
                    messageText = `Amount to be paid: ${voices.cost}üí≤` + '\n \n' +
                        'After a successful transaction, click the "Check" button';
                    break;
                case "ru":
                    messageText = `–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${voices.cost}üí≤` + '\n \n' +
                        '–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"';
                    break;
            }

            return await shopBot.sendMessage(chatId, messageText, {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: foundUserOrNull.language === 'en' ? 'üí∞ Pay' : 'üí∞ –û–ø–ª–∞—Ç–∏—Ç—å',
                            url: newInvoice.payUrl
                        }],
                        [{
                            text: foundUserOrNull.language === 'en' ? 'üîÅ Check' : 'üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å',
                            callback_data: `checkCryptoBotPayment_${voicesToBuyNum}_${newInvoice.id}`
                        }]
                    ]
                }
            });
        }

        if (girlsVoiceTypeListener.has(chatId.toString())) {
            girlsVoiceTypeListener.delete(chatId.toString());

            if (text !== '–¢–µ–∫—Å—Ç' && text !== '–ì–æ–ª–æ—Å–æ–≤–æ–µ' && text !== 'Text' && text !== 'Voice')
                return 0;

            switch (foundUserOrNull.language) {
                case 'en': {
                    // messageText = `üí• <b>Hey, hero!</b>üí•` + '\n' +
                    //     'You forgot something... I think you need to choose a model? ‚öîÔ∏è' + '\n\n' +
                    //     'Do it on the panel below and get ready for your great deeds! üí™';
                    const comment = text === 'Text' ?
                        'Enter the text with correct spelling and all punctuation marks, and write numbers in words! üìú‚úçÔ∏è' :
                        'After selecting a model, record a voice message clearly, without background noise';

                    messageText = `You have chosen conversion using ${text === 'Text' ? 'text' : 'voice'}.` + '\n' +
                        '<b>Select a model:</b>' + '\n\n' +
                        '‚ÄºÔ∏è<b>Remember</b>' + '\n' +
                        comment;

                    resultKeyboard = [
                        [{
                            text: "Lera"
                        }, {
                            text: 'Ann'
                        }, {
                            text: '‚Ü©Ô∏è Back'
                        }]
                    ];
                    break;
                }

                case 'ru': {
                    // messageText = `üí• <b>–≠–π, –≥–µ—Ä–æ–π!</b>üí•` + '\n' +
                    //     '–¢—ã –∫–æ–µ-—á—Ç–æ –∑–∞–±—ã–ª‚Ä¶ –ü–æ-–º–æ–µ–º—É, –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å? ‚öîÔ∏è' + '\n\n' +
                    //     '–°–¥–µ–ª–∞–π —ç—Ç–æ –Ω–∞ –ø–∞–Ω–µ–ª–∏ –Ω–∏–∂–µ –∏ –ø—Ä–∏—Å—Ç—É–ø–∞–π –∫ —Å–≤–æ–∏–º –≤–µ–ª–∏–∫–∏–º –ø–æ–¥–≤–∏–≥–∞–º! üí™';

                    const comment = text === '–¢–µ–∫—Å—Ç' ?
                        '–¢–µ–∫—Å—Ç –≤–≤–æ–¥–∏—Ç–µ —Å –≤–µ—Ä–Ω–æ–π –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ –≤—Å–µ–º–∏ –∑–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è, –∞ —Ü–∏—Ñ—Ä—ã –ø–∏—à–∏—Ç–µ –±—É–∫–≤–∞–º–∏! üìú‚úçÔ∏è' :
                        '–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏, –∑–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ç–∫–æ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–≤—É–∫–æ–≤ –Ω–∞ —Ñ–æ–Ω–µ';

                    messageText = `–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é ${text === '–¢–µ–∫—Å—Ç' ? '—Ç–µ–∫—Å—Ç–∞': '–≥–æ–ª–æ—Å–∞'}.` + '\n' +
                        '<b>–í—ã–±–µ—Ä–µ—Ç–µ –º–æ–¥–µ–ª—å:</b>' + '\n\n' +
                        '‚ÄºÔ∏è<b>–ü–æ–º–Ω–∏—Ç–µ</b>' + '\n' +
                        comment;


                    resultKeyboard = [
                        [{
                            text: "–õ–µ—Ä–∞"
                        }, {
                            text: '–ê–Ω–Ω–∞'
                        }, {
                            text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥'
                        }]
                    ];
                    break;
                }
            }


            await shopBot.sendSticker(chatId, "CAACAgIAAxkBAAEucIhnDmY9ZMwmJZ7MVja6WLQRMheMsQACnmYAAtkCaEh506_l6mpDDDYE");

            modelListener.set(chatId.toString(), text);

            return await shopBot.sendMessage(chatId, messageText, {
                parse_mode: "HTML",
                reply_markup: {
                    keyboard: resultKeyboard,
                    resize_keyboard: true
                }
            })
        }

        if (modelListener.has(chatId.toString())) {
            const messageType = modelListener.get(chatId.toString());

            if (!["–õ–µ—Ä–∞", '–ê–Ω–Ω–∞', '–ê–Ω–¥—Ä–µ–π', "Lera", 'Ann', 'Andrew'].includes(text)) {
                switch (foundUserOrNull.language) {
                    case 'en': {
                        messageText = `üí• <b>Hey, hero!</b>üí•` + '\n' +
                            'You forgot something... I think you need to choose a model? ‚öîÔ∏è' + '\n\n' +
                            'Do it on the panel below and get ready for your great deeds! üí™';
                        // const comment = text === 'Text' ?
                        //     'Enter the text with correct spelling and all punctuation marks, and write numbers in words! üìú‚úçÔ∏è' :
                        //     'After selecting a model, record a voice message clearly, without background noise';

                        // messageText = `You have chosen conversion using ${text === 'Text' ? 'text' : 'voice'}.` + '\n' +
                        //     '<b>Select a model:</b>' + '\n\n' +
                        //     '‚ÄºÔ∏è<b>Remember</b>' + '\n' +
                        //     comment;

                        resultKeyboard = [
                            [{
                                text: "Lera"
                            }, {
                                text: 'Ann'
                            }, {
                                text: '‚Ü©Ô∏è Back'
                            }]
                        ];
                        break;
                    }

                    case 'ru': {
                        messageText = `üí• <b>–≠–π, –≥–µ—Ä–æ–π!</b>üí•` + '\n' +
                            '–¢—ã –∫–æ–µ-—á—Ç–æ –∑–∞–±—ã–ª‚Ä¶ –ü–æ-–º–æ–µ–º—É, –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å? ‚öîÔ∏è' + '\n\n' +
                            '–°–¥–µ–ª–∞–π —ç—Ç–æ –Ω–∞ –ø–∞–Ω–µ–ª–∏ –Ω–∏–∂–µ –∏ –ø—Ä–∏—Å—Ç—É–ø–∞–π –∫ —Å–≤–æ–∏–º –≤–µ–ª–∏–∫–∏–º –ø–æ–¥–≤–∏–≥–∞–º! üí™';

                        // const comment = text === '–¢–µ–∫—Å—Ç' ?
                        // '–¢–µ–∫—Å—Ç –≤–≤–æ–¥–∏—Ç–µ —Å –≤–µ—Ä–Ω–æ–π –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ –≤—Å–µ–º–∏ –∑–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è, –∞ —Ü–∏—Ñ—Ä—ã –ø–∏—à–∏—Ç–µ –±—É–∫–≤–∞–º–∏! üìú‚úçÔ∏è' :
                        // '–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏, –∑–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ç–∫–æ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–≤—É–∫–æ–≤ –Ω–∞ —Ñ–æ–Ω–µ';
                        // messageText = `–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é ${text === '–¢–µ–∫—Å—Ç' ? '—Ç–µ–∫—Å—Ç–∞': '–≥–æ–ª–æ—Å–∞'}.` + '\n' +
                        //     '<b>–í—ã–±–µ—Ä–µ—Ç–µ –º–æ–¥–µ–ª—å:</b>' + '\n\n' +
                        //     '‚ÄºÔ∏è<b>–ü–æ–º–Ω–∏—Ç–µ</b>' + '\n' +
                        //     comment;


                        resultKeyboard = [
                            [{
                                text: "–õ–µ—Ä–∞"
                            }, {
                                text: '–ê–Ω–Ω–∞'
                            }, {
                                text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥'
                            }]
                        ];
                        break;
                    }
                }

                return await shopBot.sendMessage(chatId, messageText, {
                    parse_mode: "HTML",
                    reply_markup: {
                        keyboard: resultKeyboard,
                        resize_keyboard: true
                    }
                })
            }

            modelListener.delete(chatId.toString());

            if (messageType === '–¢–µ–∫—Å—Ç' || messageType === 'Text') {
                textMessageToVoiceListener.set(chatId.toString(), text);
            } else {
                voiceMessageToVoiceListener.set(chatId.toString(), text);
            }

            switch (foundUserOrNull.language) {
                case 'en': {
                    const age = text === "Lera" ? 18 : text === 'Ann' ? 21 : 20;
                    messageText = `<b>${text}</b>. ${age} years old` + '\n \n' +
                        `${text === 'Andrey' ? andreyDescriptionEn : text === "Lera" ? leraDescriptionEn : annaDescriptionEn}` + '\n \n' +
                        `Send the ${messageType.toLowerCase()} that you want to turn into a voice message, and it will sound like a hymn worthy of kings! üèõÔ∏è` + '\n' +
                        'Or press ‚Äú‚Ü©Ô∏è <b>Back</b>‚Äù if your choice is not yet decided. ‚öîÔ∏è';

                    resultKeyboard = [
                        [{
                            text: '‚Ü©Ô∏è Back'
                        }]
                    ];
                    break;
                }

                case 'ru': {
                    const age = text === "–õ–µ—Ä–∞" ? 18 : text === '–ê–Ω–Ω–∞' ? 21 : 20;
                    messageText = `<b>${text}</b>. ${age} –ª–µ—Ç` + '\n \n' +
                        `${text === '–ê–Ω–¥—Ä–µ–π' ? andreyDescriptionRu : text === "–õ–µ—Ä–∞" ? leraDescribtionRu : annaDescribtionRu}` + '\n \n' +
                        `–û—Ç–ø—Ä–∞–≤—å—Ç–µ ${messageType.toLowerCase()}, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ, –∏ –æ–Ω–æ –ø—Ä–æ–∑–≤—É—á–∏—Ç, —Å–ª–æ–≤–Ω–æ –≥–∏–º–Ω, –¥–æ—Å—Ç–æ–π–Ω—ã–π —Ü–∞—Ä–µ–π! üèõÔ∏è` + '\n' +
                        '–ò–ª–∏ –Ω–∞–∂–º–∏ ‚Äú‚Ü©Ô∏è <b>–ù–∞–∑–∞–¥</b>‚Äù, –µ—Å–ª–∏ —Ç–≤–æ–π –≤—ã–±–æ—Ä –ø–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω. ‚öîÔ∏è';

                    resultKeyboard = [
                        [{
                            text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥'
                        }]
                    ];
                    break;
                }
            }

            return await shopBot.sendPhoto(chatId, `./images/${(text === '–ê–Ω–¥—Ä–µ–π' || text === 'Andrew') ? 'malePhoto': (text === "–õ–µ—Ä–∞" || text === 'Lera') ? 'Lera' : 'Anna'}.jpg`, {
                caption: messageText,
                parse_mode: "HTML",
                reply_markup: {
                    keyboard: resultKeyboard,
                    resize_keyboard: true
                }
            })
        }

        if (textMessageToVoiceListener.has(chatId.toString())) {
            const modelName = textMessageToVoiceListener.get(chatId.toString());

            if (!text || !modelName) {
                return 0;
            }

            if (text.length > 200) {
                switch (foundUserOrNull.language) {
                    case 'en':
                        messageText = "The text exceeds the maximum allowed number of characters (200). Please send a shorter text.";

                        break;
                    case "ru":
                        messageText = '–¢–µ–∫—Å—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ (200). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—á–µ.';
                        break;
                }

                return await shopBot.sendMessage(chatId, messageText);
            }

            if (foundUserOrNull.voicesAvaliable <= 0 && foundUserOrNull.status !== 'admin') {
                textMessageToVoiceListener.delete(chatId.toString());
                switch (foundUserOrNull.language) {
                    case 'en':
                        messageText = 'You have run out of voice messages. To purchase, go to your personal account.';

                        break;
                    case "ru":
                        messageText = '–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–æ–ª–æ—Å–æ–≤—ã–µ. –î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.';
                        break;
                }

                switch (foundUserOrNull.language) {
                    case 'en':
                        resultKeyboard = shopBotMainMenuKeyboardEn;
                        break;
                    case "ru":
                        resultKeyboard = shopBotMainMenuKeyboardRu;
                        break;
                }

                return await shopBot.sendMessage(chatId, messageText, {
                    reply_markup: {
                        keyboard: resultKeyboard
                    }
                });
            }

            try {
                if (foundUserOrNull.status !== 'admin') {
                    await db.run('UPDATE shop_users SET voicesAvaliable = ? WHERE chatId = ?', [Number(foundUserOrNull.voicesAvaliable) - 1, chatId.toString()], function (err) {
                        if (err) {
                            return console.error(err.message);
                        }

                        console.log('language is updated');
                    });
                }

                await db.run('UPDATE shop_users SET totalVoicesRecorded = ? WHERE chatId = ?', [Number(foundUserOrNull.totalVoicesRecorded) + 1, chatId.toString()], function (err) {
                    if (err) {
                        return console.error(err.message);
                    }

                    console.log('language is updated');
                });
            } catch (e) {
                throw new Error(e);
            }

            let speaker;

            switch (modelName) {
                case '–ê–Ω–¥—Ä–µ–π': {
                    speaker = {
                        voice_id: 'm2gtxNsYBaIRqPBA5vU5',
                        voice: 'Oleg Krugliak ',
                        voice_settings: {
                            stability: 0.7,
                            similarity_boost: 0.76,
                            style: 0.32,
                            use_speaker_boost: true
                        }
                    };
                    break;
                }

                case 'Lera': {
                    speaker = {
                        voice_id: '2rJo4BNbDooc3q89IWVH',
                        voice: 'Natasha - Valley girl',
                        voice_settings: {
                            stability: 0.5,
                            similarity_boost: 0.75,
                            style: 0,
                            use_speaker_boost: true
                        }
                    };
                    break;
                }

                case 'Andrew': {
                    speaker = {
                        voice_id: 'jPI42gyGKKPr0fEdosmi',
                        voice: 'Max - fast, friendly, and direct',
                        voice_settings: {
                            stability: 0.5,
                            similarity_boost: 0.75,
                            style: 0.3,
                            use_speaker_boost: true
                        }
                    };
                    break;
                }

                case "Ann": {
                    speaker = {
                        voice_id: 'BSHBic1jFUy7dqyXEdTY',
                        voice: 'Sophia Dean',
                        voice_settings: {
                            stability: 0.5,
                            similarity_boost: 0.75,
                            style: 0,
                            use_speaker_boost: true
                        }
                    };
                    break;
                }

                case "–õ–µ—Ä–∞": {
                    speaker = {
                        voice_id: "wFyaValVXXUOvVMKrn4K", // Use the correct voice ID (Anna)
                        voice: "Anna",
                        voice_settings: {
                            stability: 0.54,
                            similarity_boost: 0.48,
                            style: 0.2,
                            use_speaker_boost: true
                        }
                    };
                    break;
                }

                default: {
                    speaker = {
                        voice_id: '6CzwEjVC4rBP2a3QLCH0',
                        voice: 'Faja',
                        voice_settings: {
                            stability: 0.32,
                            similarity_boost: 0.28,
                            style: 0.2,
                            use_speaker_boost: true
                        }
                    };
                    break;
                }
            }

            try {
                const audioStream = await elevenlabs.generate({
                    ...speaker,
                    text: text,
                    model_id: "eleven_multilingual_v2"
                });

                // Convert the stream to a buffer
                const chunks = [];
                for await (const chunk of audioStream) {
                    chunks.push(chunk);
                }
                const audioBuffer = Buffer.concat(chunks);

                const metadata = await mm.parseBuffer(audioBuffer, {
                    mimeType: 'audio/mpeg'
                });
                const duration = metadata.format.duration;

                console.log(duration);

                // Use ffmpeg to trim 1 second from the end
                const tempFile = tmp.fileSync({
                    postfix: '.mp3'
                });
                fs.writeFileSync(tempFile.name, audioBuffer);

                // Trim the audio to be 1 second shorter
                const trimmedBuffer = await new Promise((resolve, reject) => {
                    const stream = ffmpeg(tempFile.name)
                        .inputFormat('mp3')
                        .outputOptions(['-t', (duration - 0.2).toString()]) // Trim to duration - 1 second
                        .on('end', function () {
                            console.log('Trimming completed');
                        })
                        .on('error', function (err) {
                            console.log('Error during trimming:', err.message);
                            reject(err);
                        })
                        .toFormat('mp3') // Ensure it's in the correct format
                        .pipe();

                    const chunks = [];
                    stream.on('data', chunk => chunks.push(chunk));
                    stream.on('end', () => resolve(Buffer.concat(chunks)));
                    stream.on('error', reject);
                });

                // Clean up the temporary file
                tempFile.removeCallback();

                // Send the trimmed audio buffer directly to Telegram
                await shopBot.sendVoice(chatId, trimmedBuffer, {
                    filename: 'audio.mp3', // Provide a filename
                    contentType: 'audio/mpeg', // MIME type for audio
                });
            } catch (e) {
                throw new Error(e);
            }
        }
    })
}